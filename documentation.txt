1. use the NJ styling
2. mkdir config
3. mkdir instance
4. touch docker-compose.yaml
5. touch Dockerfile
6. git config --list --show origin
7. git status
8. touch .gitignore
9. touch requirements
10. touch .dockerignore
11. docker-compose
12. version "2"
13. gunicorn command with --bind option - to 0.0.0.0:8000
14. entry-point is: "app:create_app()"
15. touch Dockerfile
16. touch config/settings.py
17. touch instance/settings.py
18. touch snakeeyes/__init__.py
19. touch snakeeyes/app.py
20. Rid the container of all image trash
21. Add sphinx
22. mkdir docs
23. cd docs && sphinx-quickstart
24. cd docs && make html
25. Add docs folder to .gitignore
26. touch docs/requirements.txt

$ docker-compose build --no-cache
$ docker-compose up
$ ctrl-C
$ docker-compose stop
$ docker-compose down
$ docker rmi f $(docker images -qf dangling=true)

27. mkdir snakeeyes/blueprints
28. mkdir snakeeyes/static
29. mkdir snakeeyes/templates
30. mkdir snakeeyes/blueprints/page
31. mkdir snakeeyes/blueprints/page
32. mkdir snakeeyes/blueprints/page/templates
33. mkdir snakeeyes/blueprints/page/templates/page
34. touch snakeeyes/blueprints/__init__.py
35. touch snakeeyes/blueprints/page/__init__.py
36. cd snakeeyes/blueprints/page/templates/page && touch home.html privacy.html terms.html
37. Add import statement for 'page' to 'app.py'
38. app.py: Delete reference to the initial home page from section 06; "def index("
39. Add code for html in 'page'
40. mkdir snakeeyes/templates/layouts
41. touch snakeeyes/templates/layouts/base.html
42. mkdir snakeeyes/static/fonts
43. mkdir snakeeyes/static/images
44. mkdir snakeeyes/static/scripts
45. mkdir snakeeyes/static/scripts/vendor
46. mkdir snakeeyes/static/styles
47. mkdir snakeeyes/static/styles/vendor
48. touch snakeeyes/static/styles/main.css
49. cp ~/Desktop/bsawf-course-material/07-BPs-and-Jinja-templates/snakeeyes/static/fonts/*ontawesome* \
snakeeyes/static/fonts/
50. cp ~/Desktop/bsawf-course-material/07-BPs-and-Jinja-templates/snakeeyes/static/images/*.* \
snakeeyes/static/images/
51. cp ~/Desktop/bsawf-course-material/07-BPs-and-Jinja-templates/snakeeyes/static/scripts/vendor/*.js \
snakeeyes/static/scripts/vendor
52. cp ~/Desktop/bsawf-course-material/07-BPs-and-Jinja-templates/snakeeyes/static/styles/vendor/*.min.css \
snakeeyes/static/styles/vendor
53. touch .env

#------------------------------
NOT in code
<li><a href="{{ url_for('page.privacy') }}">Privacy Policy</a></li>
<li><a href="{{ url_for('page.terms') }}">Terms of Service</a></li>

#--------------------
Home page
1. 3 column container - ["Place bets", "Win currency", "Leaderboard"]
2. Page container: class [container, sm-margin-top]
3. 3 links
4. Body block only; Extends "layouts/base.html"

#--------------------
Templates -  base-layout [base.html]
1. navigation bar
2. main tag, class is container
3. main tag contains:  [Header block, Body block]
4. footer
5. static - script: [bootstrap, main]
6. static - styles: [bootstrap, main, font-awesome]
7. static - images

#--------------------
$ git push origin master
$ git remote
$ got remote -v

https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes

Next Steps:-
1. Read notes on moving to webpack
2. Add terms page
3. Add privacy page
4. Review lesson 30 - Create a Home page
5. Read Pro Git - working with "remotes"
6. Pull in the "Webpack" Dockerfile
7. Create "Webpack" project structure

#---------------------
Section 8 Add testing framework

1. requirements, Add entries for testing
2. app.py, add settings override
3. ToDo: Add privacy.html
4. ToDo: Add terms.html
5. ToDo: snakeeyes/blueprints/page/views.py, uncomment privacy, terms views
6. ToDo: layouts/base.html, uncomment hrefs to prvacy, terms
7. mkdir snakeeyes/tests
8. mkdir snakeeyes/tests/page
9. touch snakeeyes/tests/__init__.py
10. touch snakeeyes/tests/conftest.py
11. touch snakeeyes/tests/page/__init__.py
12. touch snakeeyes/tests/page/test_views.py
13. test/conftest.py, Add session fixture
14. test/conftest.py, pytest works by importing and using app.create_app()
15. test/conftest.py, pytest works with @pytest.yield_fixture decorator
16. test/conftest.py, Add function fixture
17. snakeeyes/tests/page/test_views.py, Add tests
18. comment-out tests for privacy, terms
19. run tests
20. Must run build b/c requirements were added
21. run local git commands
22. run git remote

#---------------------
Section 9 - Add CLI scripting function

1. cp ~/Desktop/bsawf-course-material/09-Create-cli-script/snakeeyes/static/fonts/*ontAwesome* \
snakeeyes/static/fonts/
2. ToDo: Add privacy.html
3. ToDo: Add terms.html
4. ToDo: snakeeyes/blueprints/page/views.py, uncomment privacy, terms views
5. ToDo: layouts/base.html, uncomment hrefs to privacy, terms
6. mkdir cli
7. mkdir cli/commands
8. touch cli/__init__.py
9. touch cli/cli.py
10. touch cli/commands/__init__.py
11. touch cli/commands/cmd_cov.py
12. touch cli/commands/cmd_flake8.py
13. touch cli/commands/cmd_cov.py
14. cli/cli.py, return list of commands
15. cli/cli.py, get command, pattern: compile + eval + return function
16. dynamic eval of compiled code: https://realpython.com/python-eval-function/
17. @click.command(cls=CLI) decorator, command alias pattern
18. apply Command Alias pattern: https://click.palletsprojects.com/en/7.x/advanced/
19. touch cli/commands/cmd_test.py
20. cli/commands/cmd_cov.py, return term-missing coverage report
21. cli/commands/cmd_cov.py, uses "return subprocess.call(...)"
22. https://queirozf.com/entries/python-3-subprocess-examples#call-example-using-shell-true
23. Add line "RUN pip install..." to Dockerfile, lesson no 41 [1:45]
23a. ... creates egg-folder for Docker container [... overwritten]
24. touch setup.py
25. Add setup entry with "entry-point"
26. mkdir SnakeEyes_CLI.egg-info
27. touch SnakeEyes_CLI.egg-info/dependency_links.txt
28. touch SnakeEyes_CLI.egg-info/entry_points.txt
29. touch SnakeEyes_CLI.egg-info/PKG-INFO
30. touch SnakeEyes_CLI.egg-info/requires.txt
31. touch SnakeEyes_CLI.egg-info/SOURCES.txt
32. touch SnakeEyes_CLI.egg-info/top_level.txt
33. modify "egg-info" files with required information

$ docker-compose exec website snakeeyes
$ docker-compose exec website snakeeyes flake8
$ docker-compose exec website snakeeyes test

#---------------------
Section 10 - Add Extension

1. touch snakeeyes/extensions.py
2. app.py, add code for extensions
3. extensions.py, init "debug toolbar"
4. test that debug-toolbar works
5. $ git push origin master

#---------------------
Section 11 - Add Contact form

1. requirements.txt; [redis, celery, Forms, Flask-Mail]
2. mkdir lib
3. touch lib/__init__.py
4. touch lib/flask_mailplus.py
5. touch lib/tests.py
6. mkdir snakeeyes/blueprints/contact
7. touch snakeeyes/blueprints/contact/__init__.py
8. touch snakeeyes/blueprints/contact/forms.py
9. touch snakeeyes/blueprints/contact/tasks.py
10. touch snakeeyes/blueprints/contact/views.py
11. mkdir snakeeyes/blueprints/contact/templates
12. mkdir snakeeyes/blueprints/contact/templates/contact
13. touch snakeeyes/blueprints/contact/templates/contact/index.html
14. mkdir snakeeyes/blueprints/contact/templates/contact/mail
15. touch snakeeyes/blueprints/contact/templates/contact/mail/index.txt
16. main.css, Add Bootstrap-overrides
17. mkdir snakeeyes/templates/macros
18. touch snakeeyes/templates/macros/flash.html
19. touch snakeeyes/templates/macros/form.html
20. mkdir snakeeyes/tests/contact
21. touch snakeeyes/tests/contact/__init__.py
22. touch snakeeyes/tests/contact/test_tasks.py
23. touch snakeeyes/tests/contact/test_views.py
24. app.py, Add Celery
25. app.py, Add Contact
26. app.py, Add extensions: mail, csrf
27. app.py, Add CELERY_TASK_LIST
28. app.py, Add create celery app
29. snakeeyes/templates/macros/form.html, Render a form field's label with visual aid
30. snakeeyes/templates/macros/form.html, Render forms errors
31. snakeeyes/templates/macros/form.html, Render a form field
32. snakeeyes/templates/macros/form.html, Render checkbox
33. snakeeyes/templates/macros/form.html, Render a form group
34. snakeeyes/templates/macros/form.html, Render ...tag that contains a CSRF token, hidden flds
35. Understanding the macro code - [https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iii-web-forms]
36. macro code - separation of concerns ... use snakeeyes/blueprints/contact/forms.py
37. macro code - WTF form base class is imported in .../forms.py
38. macro code - Add form to html template... form knows how to render itself
39. macro code - https://bootstrap-flask.readthedocs.io/en/latest/index.html
40. macro code - not using bootstrap-flask... furthers understanding
41. macro code - ... context processor [CP] makes variables available in templates with the value of g.<object>.
42.   ...  gives an idea how this works.
43. macro code - Variables are not limited to values; a CP can also make functions available to templates
44. macro code - https://flask.palletsprojects.com/en/1.1.x/templating/#context-processors
45. macro code - Templating With Jinja2 in Flask: Advanced [envato tuts]
46. snakeeyes/templates/layouts/base.html,  add href to contact.index

47. touch snakeeyes/blueprints/page/views.py
48. Contact Section issue
 ""...Task snakeeyes.blueprints.contact.tasks.deliver_contact_email[dc4156b1-8906-4414-b559-3da136e05acf]
 raised unexpected: SMTPRecipientsRefused({'dreames': (404, b'4.5.2 <dreames>: Recipient address rejected:
 need fully-qualified address')})

49.  Here is the correct connect info:-
MAIL_USERNAME = 'dreames'
MAIL_PASSWORD = 'Ny1958Giants'

50. contact/tasks.py, codebase needs to be changed - DEFAULT_SENDER, Not USERNAME
51. "send_template_message(subject=...recipients=[celery.conf.get('MAIL_DEFAULT_SENDER')],"
52. status_code = 200, response = <Response streamed [400 BAD REQUEST]>, message = 'Thanks'
53. https://flask.palletsprojects.com/en/1.1.x/errorhandling/
54.  Don't yet know why I am getting a 400 response [in Test]
55.  Testing the contact form manually works - see screen shot in zzz/
56.  Eliminate foo@bar.com??
57.  Set up gunicorn logging from Section 14
58. Dockerfile, docker-compose, gunicorn -c "python:config.gunicorn" --reload "snakeeyes.app:create_app()"
59. Add config/gunicorn.py
60. touch config/gunicorn.py

!direct - NOT using pytest:--
from celery -
celery_1   | [2020-09-28 18:27:54,947: WARNING/ForkPoolWorker-2]
 b'Content-Type: text/plain; charset="utf-8"\r\nMIME-Version: 1.0\r\nContent-Transfer-Encoding: 7bit\r\n
 Subject: [Snake Eyes] Contact\r\n
 From: info@rmsfinance.com\r\n
 To: info@rmsfinance.com\r\n
 Date: Mon, 28 Sep 2020 18:27:54 +0000\r\n
 Message-ID: <160131767252.9.18080475230753893094@d033ae7d3e35>\r\n
 Reply-To: info@rmsfinance.com\r\n\r\n
 info@rmsfinance.com wrote:\r\n\r\nTest message from RMS Snake Eyes.\r\n.\r\n'

celery_1   | [2020-09-28 18:27:55,052: WARNING/ForkPoolWorker-2] reply:
celery_1   | [2020-09-28 18:27:55,052: WARNING/ForkPoolWorker-2] b'250 2.0.0 Ok: queued as 0074A6003D972\r\n'
celery_1   | [2020-09-28 18:27:55,053: WARNING/ForkPoolWorker-2] reply: retcode (250); Msg: b'2.0.0 Ok: queued as 0074A6003D972'
celery_1   | [2020-09-28 18:27:55,054: WARNING/ForkPoolWorker-2] data:
celery_1   | [2020-09-28 18:27:55,055: WARNING/ForkPoolWorker-2] (250, b'2.0.0 Ok: queued as 0074A6003D972')
celery_1   | [2020-09-28 18:27:55,056: WARNING/ForkPoolWorker-2] send:
celery_1   | [2020-09-28 18:27:55,056: WARNING/ForkPoolWorker-2] 'quit\r\n'
celery_1   | [2020-09-28 18:27:55,159: WARNING/ForkPoolWorker-2] reply:
celery_1   | [2020-09-28 18:27:55,160: WARNING/ForkPoolWorker-2] b'221 2.0.0 Bye\r\n'
celery_1   | [2020-09-28 18:27:55,160: WARNING/ForkPoolWorker-2] reply: retcode (221); Msg: b'2.0.0 Bye'

Maybe the ANSWER is: success is 250, and not 200

#----------------------------
Add Section 14 code, logging, middleware, error handling
1. config/settings.py, Add logging to snakeeyes:  'LOG_LEVEL =...'
2. snakeeyes/app.py, set up log levels for application; this will override ... setlevel
3. snakeeyes/app.py, import ProxyFix
4. snakeeyes/app.py, Add 'def middleware('
5. Note that ALL logs, by default, are written to stdout
6. Call middleware function from the app factory method
7. Call error templates from the app factory meth
8. Add error templates below middleware
9. mkdir snakeeyes/templates/errors
10. touch snakeeyes/templates/errors/404.html
11. touch snakeeyes/templates/errors/500.html
12. Modify extends clause to inherit from base.html, Not app.html [till ready]
13. Add py.test 404 page test
14. lib/tests.py, Add class ViewTestMixin
15. app.py, Add exception handler to factory meth
16. app.py, Add function
17. contact/test_views.py, Added code ... current_app.config['WTF_CSRF_ENABLED'] = False
18. 7 passed, 32 [deprecation] warnings in 3.76s
19. Note: https://www.dynatrace.com/news/blog/from-monitoring-to-software-intelligence-for-flask-applications/

#----------------------------
Convert to Webpack update
1. mkdir assets
2. mkdir public
3. update .env
4. Change Dockerfile in steps


